[{"title":"egg","date":"2021-09-20T14:35:44.871Z","url":"/2021/09/20/egg.js/","tags":[["egg","/tags/egg/"]],"categories":[["Egg","/categories/Egg/"]],"content":"egg.js参考教程视频  egg.js 的特性:1、提供基于 Egg 定制上层框架的能力2、高度可扩展的插件机制3、内置多进程管理 4、基于 Koa 开发，性能优异5、框架稳定，测试覆盖率高6、渐进式开发 创建egg的环境npm i egg-init -g(只需要安装一次) 创建项目终端cd 到项目要放置的路径中（注意目录最好是不要用中文 不要有空格） ​ egg-init 项目名称 –type=simple 创建项目 如： egg-init eggdemo01 --type=simple cd到项目目录下，cd eggdemo01 安装依赖 npm install， 安装成功后直接执行npm run dev， 默认端口是7001，然后在浏览器中打开localhost:7001 如果出现如下图所示就说明初始化项目成功了，如果安装依赖失败那么可以强制npm清理一下缓存npm cache clean –force然后再安装，如果还是报错可以翻墙到外面再试下。 vs插件市场eggjs 路由路由不需要引入，可直接使用 egg是一个MVC的框架： view 视图 模板 页面的展示 Controller 控制器 负责处理一些业务逻辑 model 模型（service） 和数据库打交道（查询数据库、操作数据库数据 请求数据）(复杂的业务逻辑 以及数据操作) 结构： Controller 控制器 service 服务 extend 扩展 middleware 中间件 获取get传值 动态路由1、在controller的news.js中添加 2、在view的router.js添加 加载模板引擎 视图（view）egg-view-ejs安装 使用 在view中新建news.html 在controller的news.js中添加 运行即可 在页面添加数据 1、在controller的news.js中添加 2、news.html 解决数据冗余若home.js和news.js有相同数据，则将数据封装到service /service/news.js home.js和news.js使用该数据 调用this.service.news.getNewsList(); 控制器（api）的访问 在config.default.js中配置api 可以在service或控制器中直接使用 服务继承Service为了方便egg在this上面绑定以下的方法 this.ctx: 当前请求的上下文 Context 对象的实例，通过它我们可以拿到框架封装好的处理当前请求的各种便捷属性和方法。 this.app: 当前应用 Application 对象的实例，通过它我们可以拿到框架提供的全局对象和方法。 this.service：应用定义的 Service，通过它我们可以访问到其他业务层，等价于 this.ctx.service 。 this.config：应用运行时的配置项。 this.logger：logger 对象，上面有四个方法（debug，info，warn，error），分别代表打印四个不同级别的日志，使用方法和效果与 context logger 中介绍的一样，但是通过这个 logger 对象记录的日志，在日志前面会加上打印该日志的文件路径，以便快速定位日志打印位置。 服务创建user服务返回一个对象 可在控制器被调用 也可在另一个服务被调用 在HTML渲染 总结 控制器可以调用服务，一个服务可被多个控制器调用，一个控制器可以调用不同的服务 服务之间可相互调用 注意：服务不能调用控制器，控制器也不能相互调用 //服务的命名规则Service文件必须放在app/service 目录，可以支持多级目录， 访问的时侯可以通过目录名级联访问。app/service/biz/user.js =&gt; ctx. service .biz .userapp/ service/sync_ user.js =&gt; ctx. service . syncUserapp/ service/HackerNews.js =&gt; ctx . service . hackerNews 爬取api接口数据 控制器访问服务 在服务中通过抓取接口返回数据 使用render将获取的数据显示到界面 配置路由router.js 控制器news.js 服务news.js news.html newscontent.html extend Application Context Request Response Helper 新建extend/helper.js 扩展里面引入第三方模块 1、安装 2、使用 在news.html中调用helper.formatTime() 注意：10位的时间戳在JavaScript中被认为是无效的时间戳 ，解决方法将param*1000 调用extend里面扩展的helper方法： 1、在extend/helper.js中增加getHelperData方法 在app/controller/home.js中调用 中间件中间件：匹配路由前、匹配路由完成做的一系列操作。 1、新建middleware/printdate.js中间件 2、在config.default.js中配置中间件 3、给printdate中间件传入的参数 4、打印options 利用中间件屏蔽id： 要屏蔽的id：1、从数据库获取 新建middleware/forbidip.js中间件 配置中间件 2、从参数传入 在config.default.js中配置要屏蔽的id middleware/forbidip.js中间件 post提交数据新建home.html 增加控制器 home.js 增加路由 router.ja Cookie●cookie 是存储于访问者的计算机中的变量。可以让我们用同一个浏览器访问同一一个域名的时候共享数据。心●HTTP 是无状态协议。简单地说，当你浏览了一个页面，然后转到同一个网站的另-一个页面，服务器无法认识到这是同一个浏览器在访问同一一个网站。每-一次的访问，都是没有任何关系的。 cookie: 1.可以实现同一个浏览器访问同一个域的时候不同页面之间的数据共享 2、实现数据的持久化(关子浏览器重新打开以后数据还存在) 需求：同一个浏览器访问同一个域，news页面能访问到主页面的值1、在home.js下设置一个值 2、在news.js获取到这个值 3、再将这个值渲染到页面上 4、在news.html页面中打印这个值 需求:实现数据的持久化默认情况:cookies当浏览器关闭以后就销毁了 注意:默认情况下面egg.js里面的cookie没法设置中文 其他参数： 获取时解密 设置中文cookie (encrypt :true) 清除cookie方法1： 方法2： session基于Cookie session是另一种记录客户状态的机制，不同的是Cookie保存在客户端浏览器中，而session保存在服务器上。 当浏览器访问服务器并发送第一次请求时 ,服务器端会创建一个session对象,生成一个类似于key,value的键值对，然后将key(cookie)返回到浏览器(客户)端,浏览器下次再访问时,携带key(cookie) ,找到对应的session(value)。 1、设置 2、获取 设置session的过期时间5s 基于cookie 不建议使用 在config.default.js中的配置 请求1、get请求 2、post请求 3、接口返回值 "},{"title":"flex弹性布局","date":"2021-09-20T14:35:29.900Z","url":"/2021/09/20/flex%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/","tags":[["flex弹性布局","/tags/flex%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/"]],"categories":[["flex弹性布局","/categories/flex%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/"]],"content":"flex弹性布局 采用 Flex 布局的元素，称为 Flex 容器，简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目，简称”项目”。 以下6个属性设置在容器上 flex-direction 决定项目的排列方向 flex-warp 如果一条轴线排不下，如何换行 flex-flow flex-direction和flex-warp的简写形式 justify-content 定义项目在主轴上的对齐方式 align-items 定义项目在交叉轴上的对齐方式 align-content 定义项目在多根轴线上的对齐方式（交叉轴对齐） 以下6个属性设置在项目上 order 定义项目的排列顺序（数值越小，排列越靠前，默认为0） flex-grow 定义项目的放大比例 flex-shrink 定义项目的缩小比例（负值对该属性无效） flex-basis 定义了在分配多余空间之前，项目占据的主轴空间 （它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。） flex 是flex-grow，flex-shrink，flex-basis的简写，后两个属性可选 align-self 允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性 （表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。） （完） 参考地址"},{"title":"HTTP响应状态码参考","date":"2021-09-20T14:34:49.510Z","url":"/2021/09/20/HTTP%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81%E5%8F%82%E8%80%83/","tags":[["HTTP","/tags/HTTP/"]],"categories":[["HTTP","/categories/HTTP/"]],"content":"HTTP响应状态码参考1xx:信息 2xx:成功 3xx:重定向 4xx:客户端错误 5xx:服务器错误"},{"title":"Node.js","date":"2021-09-20T14:34:19.363Z","url":"/2021/09/20/nodejs/","tags":[["node","/tags/node/"]],"categories":[["Node","/categories/Node/"]],"content":"nodejs nodejs不是语言不是框架是js的一个运行时环境可以解析执行js代码 运行的时候指的是指令加载到内存并由CPU执行的时候 浏览器中的jsEcmaScript(基本语法、if、var、function、Object、Array)BOMDOM node.js中的jsEcmaScript语法 服务端不操作页面（没有BOM、DOM） 核心模块 第三方模块 用户自定义模块 nodejs特性：事件驱动、非阻塞IO模型 核心模块在node这个js执行环境中为js提供了一些服务器级别的操作API，这些API大多数都包装到核心模块中。 例如文件操作的fs核心模块，http服务构建的http模块，path路径操作模块，os操作系统信息模块。。。 所有核心模块在使用的时候都必须手动的先使用require方法来加载，才可以使用。 核心模块本质也是文件。 fs文件操作模块 http网络服务构建模块 服务器用来提供对数据的服务 1、发送请求 2、接收请求 3、处理请求 4、发送响应 解决文字乱码问题服务器默认发送的数据，是utf8编码的内容但浏览器不知道中文操作系统默认是gbk在http协议中，Content-Type是用来告知对方数据内容是什么类型，plain是普通文本不同的资源对应的Content-Type不同一般只为字符数据才指定编码，图片不需要 os操作系统信息模块path路径处理模块 url：统一资源定位符一个url对应一个资源 根据不同的请求路径发送不同的响应结果 响应内容只能是二进制数或字符串 用户自定义模块语法1、导出成员2、外部引入使用 案例模板a.js b.js 导出exports require方法的两个作用：1、用来加载模块并执行里面的代码2、拿到被加载文件模块导出的接口对象 每个文件模块中都提供一个对象：exportsexports默认是一个空对象 在node中，没有全局作用域，只有模块文件作用域，默认文件中所有成员只在当前文件模块有效 导出多个成员（必须在对象中）： 导出单个成员（拿到的就是：函数、字符串） 以下情况会覆盖 也可以这样来导出多个成员 exports原理解析exports是module.exports的一个引用： 当exports重新赋值时，则不等于module.exports里的值，且module.exports里的值不会被改变。 require方法加载规则模块查找机制 优先从缓存中加载 核心模块 路径形式的文件模块 第三方模块 路径形式的模块 ./当前目录 ../上级目录 核心模块 本质也是文件。 核心模块文件已经编译到二进制文件中，只需按照名字加载就可以了 第三方模块 凡是第三方模块都必须通过npm来下载 使用时可以通过require(‘包名’)的方式加载使用 node_modules/art-template/package.json文件中的main属性就记录了art-template的入口模块 实际上最终加载的还是文件 如果package.json不存在或main指定入口模块也没有 则node会自动找该目录下的index.js（index.js就是个默认备选项） 一个项目仅有一个node_modules 且存放在项目根目录 IP地址和端口号的概念 ip地址用来定位计算机 端口号用来定位具体的应用程序 所有需要联网通信的应用程序都会占用一个端口号 端口号的范围从0~65536之间 在计算机中有些端口号，最好不要去使用，例如http服务默认的80 练习的时候使用简单好记的就可以了，如3000、5000等没有什么含义 在一台计算机中，同一个端口号同一时间只能被一个程序占用 服务端渲染和客户端渲染的区别 服务端渲染说白了就是在服务端使用模板引擎 客户端渲染不利于SEO搜索引擎优化 服务端渲染是可以被爬虫抓取到的，客户端异步渲染是很难被爬虫抓取到的 所以真正的网站是二者结合来做的 例如：京东的商品列表就是采用服务端渲染，目的是为了SEO搜索引擎优化 而它的商品评论列表为了用户体验，而且也不需要SEO搜索引擎优化，所以采用的是客户端渲染 Node.js REPL(Read Eval Print Loop:交互式解释器)这个环境的作用只是用来做一些辅助测试：例如可以直接在里面使用node中的核心模块而不需要require加载。 表示一个电脑的环境，类似 Window 系统的终端或 Unix/Linux shell，我们可以在终端中输入命令，并接收系统的响应。 Node 自带了交互式解释器，可以执行以下任务： 读取 - 读取用户输入，解析输入了Javascript 数据结构并存储在内存中。 执行 - 执行输入的数据结构 打印 - 输出结果 循环 - 循环操作以上步骤直到用户两次按下 ctrl-c 按钮退出。 案例模板 / index.html 开放public目录中的静态资源 当请求 /public/xxx 的时候，读取响应 public 目录中的具体资源 /post post.html /tijiao 4.1接收表单提交数据 4.2存储表单提交数据 4.3让表单重定向到 / npm（安装第三方软件） node package manager （node 包管理器） npm是世界上最大的开源库生态系统 绝大多数js相关的包都放在了npm上，为了方便开发人员下载使用 只要安装了node就已经安装了npm npm网站：npmjs.com npm命令行工具查看版本号可以在命令行输入: 升级npm: 常用命令 npm init -y 可以跳过向导，快速生成package.json npm install 一下子把dependencies中的依赖项全部安装 npm install 包名 只下载 简写 npm i 包名 npm install --save 包名 下载并保存依赖项 简写 npm i -S 包名 npm uninstall 包名 只删除，如果有依赖项会依然保存 简写npm un 包名 npm uninstall --save 包名 删除的同时也会把依赖信息去除 简写npm un -S 包名 npm help 查看使用帮助 npm 命令 --help 查看指定命令的使用帮助 解决npm被墙问题npm存储包文件的服务器在国外，有时候会被墙，速度很慢 淘宝的开发团队把npm在国内做了一个备份 安装淘宝的cnpm: 接下来你安装包的时候把之前的npm换成cnpm 举个例子 package.json 建议每个项目都要有一个package.json文件(包描述文件) 可以通过npm init的方式自动初始化出来 建议执行npm install 包名的时候都加上--save这个选项，目的是用来保存依赖项信息 如果node_modules删除了，只需要npm install就会自动把package.json中的dependencies中所有的依赖项都下载回来 nrm npm自定义脚本命令 日期处理模块 nodemon自动重启工具安装 传送门： Express安装 hello world 修改完成代码自动重启我们可以使用一个第三方命令行工具，nodemon来帮助解决修改代码重启服务器问题。 安装完毕后使用： 它会监视你的文件变化。 检验是否安装成功： 基本路由路由器 请求方法 请求路径 请求处理函数 get： post: 静态服务 在Express中配置使用art-template模板引擎安装： 配置： 使用： 如果希望修改默认的views视图渲染存储目录，可以： 在Express获取表单get请求数据Express内置了一个API，可以直接通过req.query来获取 在Express获取表单post请求数据在Express中没有内置获取表单post请求体的API，需要使用第三方包body-parser 安装： 配置： 使用： MongoDBMongoDB数据库的基本概念 可以有多个数据库 一个数据库中可以有多个集合（表） 一个集合中可以有多个文档（表记录） 文档结构很灵活，没有任何限制 MongoDB非常灵活，不需要像MySQL一样先创建数据库、表、设计表结构 在这里只需要，当你需要插入数据的时候，只需要指定往哪个数据库的哪个集合操作就可以了 建库建表由MongoDB自动帮你完成 关系型数据库和非关系型数据库表就是关系 或者说表与表之间存在关系 所有关系型数据库都需要通过sql语言来操作 所有关系型数据库在操作之前都需要设计表结构 而且数据表还支持约束 唯一的 主键 默认值 非空 非关系型数据库非常灵活 有的非关系型数据库就是key-value对儿 但MongoDB是长的最像关系型数据库的非关系型数据库 数据库-》数据库 数据表-》集合（数组） 表记录-》（文档对象） MongoDB不需要设计表结构 安装 下载 安装 配置环境变量 最后输入mongod --version检测是否安装成功 启动和关闭数据库 启动： 停止： 连接和退出数据库连接: 退出： 基本命令 show dbs 查看显示所有数据库 db 查看当前操作的数据库 use 数据库名称 切换到指定的数据（如果没有会新建） hello word 官方指南官方文档：  设计Scheme 发布Model 增加数据 查询所有 按条件查询所有 按条件查询单个 删除数据 更新数据 使用Node操作MySQL数据库安装： 使用： "},{"title":"Uni app 页面&组件生命周期","date":"2021-09-20T14:33:51.924Z","url":"/2021/09/20/Uni%20app%20%E9%A1%B5%E9%9D%A2&%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/","tags":[["vue","/tags/vue/"]],"categories":[["vue随笔","/categories/vue%E9%9A%8F%E7%AC%94/"]],"content":"Uni app 页面&amp;组件生命周期不论是app还是小程序，生命周期是非常重要的知识点。 uni-app 支持如下生命周期函数： 页面的生命周期onLoad 监听页面加载，其参数为上个页面传递的数据，参数类型为object（用于页面传参）onShow 监听页面显示onReady 监听页面初次渲染完成onHide 监听页面隐藏onUnload 监听页面卸载onPullDownRefresh 监听用户下拉动作onReachBottom 页面上拉触底事件的处理函数onShareAppMessage 用户点击右上角分享 微信小程序onPageScroll 监听页面滚动onTabItemTap 当前是 tab 页时，点击 tab 时触发。 组件的生命周期beforeCreate：组件初始化，但数据原生观测、自定义观测(event\\watcher)没生成之前。 未完全创建阶段created：组件创建后，但还未挂载 完全创建阶段beforeMount：组件渲染后，挂载前。 渲染后待挂载mounted： 组件挂载到页面 可用 vm.$el 访问 挂载OKbeforeUpdate： 虚拟 DOM 重新渲染和打补丁之前 再次渲染前updated ： 组件 DOM 已经更新 再次渲染后activated： keep-alive 组件激活时调用。 当前组件被激活：显示deactivated： keep-alive 组件停用时调用。 当前组件隐藏beforeDestroy： 实例销毁之前调用。实例仍然完全可用。 销毁前destroy： Vue 实例销毁后调用补充：1.挂载阶段，先渲染组件，然后挂载组件。"},{"title":"vscode npm 配置cnpm不可用","date":"2021-09-20T14:33:27.451Z","url":"/2021/09/20/vscode%20npm%20%E9%85%8D%E7%BD%AEcnpm%E4%B8%8D%E5%8F%AF%E7%94%A8/","tags":[["npm","/tags/npm/"]],"categories":[["vue随笔","/categories/vue%E9%9A%8F%E7%AC%94/"]],"content":"vscode npm 配置cnpm不可用在powershell 中输入 get-ExecutionPolicy 默认是Restricted(禁用) 输入set-ExecutionPolicy 输入RemoteSigned 即可"},{"title":"vuejs和jquery可以混着用吗","date":"2021-09-20T14:33:15.644Z","url":"/2021/09/20/vuejs%E5%92%8Cjquery%E5%8F%AF%E4%BB%A5%E6%B7%B7%E7%9D%80%E7%94%A8%E5%90%97/","tags":[["vue","/tags/vue/"]],"categories":[["vue随笔","/categories/vue%E9%9A%8F%E7%AC%94/"]],"content":"vuejs和jquery可以混着用吗1、Vue 的官方是不建议直接操作 DOM 的，Vue 的用途在于视图和数据的绑定。如果通过JQuery 直接操作 DOM 的话，势必会造成视图数据和模型数据的不匹配，这样 Vue 就失去它存在的意义了； 2、JQuery 和 VueJS 合理使用并不会造成冲突，因为他们的侧重点不同，VueJS 侧重数据绑定和视图组件，JQuery 侧重异步请求和动画效果。如果使用JQuery + VueJS 开发，一定要在 Vue 渲染完所有的 HTML组件之后再通过 JQuery 处理，而使用 JQuery 时应避免直接操作 DOM ，但是应用动画是允许的； 3、JQuery 与 VueJS 相互配合可以非常高效的完成异步任务，首先通过 JQuery 发出 Ajax 请求，接受到服务端传递的 JSON 数据后，再通过 Vue 将数据绑定到组件上，最后由 JQuery 进行动画处理，整个过程就如行云流水般自然； 4、说句题外话，Vue 的目的不是取代 JQuery，它是为了解决前后端分离而出现的。如果没有数据变化，只是单纯的样式变化，则没有必要去大费周章进行视图模型的绑定，并且还不利于 SEO 优化。"},{"title":"在vue的脚手架中添加bootstrap","date":"2021-09-20T14:33:12.040Z","url":"/2021/09/20/vue%E7%9A%84%E8%84%9A%E6%89%8B%E6%9E%B6%E4%B8%AD%E6%B7%BB%E5%8A%A0bootstrap/","tags":[["vue","/tags/vue/"]],"categories":[["vue随笔","/categories/vue%E9%9A%8F%E7%AC%94/"]],"content":"在vue的脚手架中添加bootstrap参考网址：   一、在项目的根目录下创建vue.config.js 关键代码： 二、在main.js中引入jquery、bootstrap 三、在.eslintrc.js中添加jquery: true 解决有些bootstrap的样式失效问题： 查看bootstrap的版本，添加bootstrap对应的版本代码 "},{"title":"在vue项目/uniapp中使用md5加密","date":"2021-09-20T14:33:02.196Z","url":"/2021/09/20/vue%E9%A1%B9%E7%9B%AEuniapp%E4%B8%AD%E4%BD%BF%E7%94%A8md5%E5%8A%A0%E5%AF%86/","tags":[["vue","/tags/vue/"]],"categories":[["vue随笔","/categories/vue%E9%9A%8F%E7%AC%94/"]],"content":"在vue项目/uniapp中使用md5加密在根目录下安装MD5模块npm install js-md5 -D在项目中引入md5模块 import md5 from &#39;js-md5&#39;; 使用md5();"},{"title":"解决wamp服务器离线的几种方法","date":"2021-09-20T14:32:55.137Z","url":"/2021/09/20/%E8%A7%A3%E5%86%B3wamp%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A6%BB%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/","tags":[["wamp","/tags/wamp/"]],"categories":[["其他","/categories/%E5%85%B6%E4%BB%96/"]],"content":"1.文件名不能是中文2.apache里的http.conf的80改成8080端口3.防护墙里的高级设置里的入站规则里的apache HTTP Server改为启用4.切换到在线状态"},{"title":"微信小程序mina","date":"2021-09-20T14:32:30.866Z","url":"/2021/09/20/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fmina/","tags":[["微信小程序","/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"]],"categories":[["微信小程序","/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"]],"content":"微信小程序mina参考代码工程mina-show-goods 参考教程视频 在线接口文档 使用阿里icon图标1、建立styles/iconfont.wxss文件复制Font class 生成的代码 2、在app.wxss中全局引用 在微信小程序中 不支持 通配符正确用法 存在 变量这个知识1、定义颜色 2、使用颜色 使用组件1、在components创建组件SearchInput 2、在要使用的页面index.json中引入组件 3、在index.wxml中使用组件 wx:forwx:for 这个是正常的循环，没什么可说的。 wx:for-item=‘变量名（随便起的）’ 它是指定循环数据当前的变量名，可以通过 展示数组的元素。 wx:for-index=‘变量名（随便起）’，它是指向当前元素的下标名，可以在其他事件中定义自定义事件（data-xxx=’‘，，该自定义属性可以在参数e下面打印出来）获取该下标。 web中的本地存储和小程序中的本地存储的区别1:写代码的方式不一样了 web: 小程序中: 2:存的时候有没有做类型转换 web:不管存入的是什么类型的数据，最终都会先调用以下toString(), 把数据变成了字符串再存入进去 小程序:不存在类型转换的这个操作存什么类似的数据进去，获取的时候就是什么类型 onLoad中的options参数小程序页面加载的时候，可以通过options获取到上一个页面标签的属性以及属性值 wx:key=”*this”*this 代表for循环中的 item 本身 性能优化原： 大量的请求没有使用过的数据，会降低小程序的性能,使小程序加载缓慢 改： 足个提取要请求的数据，减少请求数据量 iPhone部分手机 不识别webp图片格式webp图片格式体积小质量高 但iPhone部分手机 不识别webp图片格式。 最好找到后台 让他进行修改； 临时自己改 确保后台存在 1.webp =&gt; 1.jpg； 使用Array map() 方法来过滤数据map()方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。它的语法是： 因此使用map()方法可以过滤掉一些数据，得到你想要的数据。 如： 点击轮播图放大预览bindtap绑定事件 自定义data-url=”” 接收传递过来的图片url 总js代码 可解构 使用button，但不改变view的样式 蒙版在tool_item里添加button 使用绝对定位，让button和父元素一样大小，覆盖在父元素上 "},{"title":"关于hexo","date":"2021-09-20T14:23:09.103Z","url":"/2021/09/20/%E5%85%B3%E4%BA%8Ehexo/","tags":[["hexo","/tags/hexo/"]],"categories":[["Hexo","/categories/Hexo/"]],"content":"1.官方主题 2.使用hexo+github搭建博客详细教程 "},{"title":"收录一些醍醐灌顶的知识","date":"2021-09-20T14:18:18.967Z","url":"/2021/09/20/%E6%94%B6%E5%BD%95%E4%B8%80%E4%BA%9B%E9%86%8D%E9%86%90%E7%81%8C%E9%A1%B6%E7%9A%84%E7%9F%A5%E8%AF%86/","tags":[["前端","/tags/%E5%89%8D%E7%AB%AF/"]],"categories":[["前端","/categories/%E5%89%8D%E7%AB%AF/"]],"content":"1.深拷贝和浅拷贝详解 2.对于JavaScript原生的JS 3.Vue 超清晰思维导图 4.原型–面向对象ES6\\1. 面向对象和面向过程 2. ES6 类语法 3. 继承 4. 面向对象案例 5. 原型和原型链 6. 组合继承 7. 严格模式 8. 闭包 9. 递归函数 10. 深拷贝浅拷贝 11. 高阶函数 12. call、apply、bind 13. ES6 14. 对象解构 15. 箭头函数 16. 扩展运算符 17. 模板字符串"},{"title":"css随笔","date":"2021-09-20T14:12:13.712Z","url":"/2021/09/20/css%E9%9A%8F%E7%AC%94/","tags":[["css","/tags/css/"]],"categories":[["css随笔","/categories/css%E9%9A%8F%E7%AC%94/"]],"content":"overflow:hidden的作用（溢出隐藏、清除浮动、解决外边距塌陷、margin重叠等等）1.假设一个父元素 parent 内部只有 2 个子元素 child，且它们都是左浮动的，这个时候 parent 如果没有设置高度的话，因为浮动造成了高度坍塌，所以 parent 的高度会是 0。2.如果加上overflow: hidden，将1个子元素设置高度为400px，另一个设置高度为200px，那么父元素的高度就为400px。3.通过 overflow: hidden 来清除浮动并不完美，当元素有阴影或存在下拉菜单的时候会被截断，所以该方法使用比较局限。4.给一个元素中设置overflow:hidden，那么该元素的内容若超出了给定的宽度和高度属性，那么超出的部分将会被隐藏，不占位。5.父级元素内部有子元素，如果给子元素添加margin-top样式，那么父级元素也会跟着下来，造成外边距塌陷，因此，给父级元素添加overflow:hidden，就可以解决这个问题了。6.属于同一个 BFC 的两个相邻盒子的 margin 会发生重叠，将其中一个盒子外层加一层父元素div并给父级元素添加overflow:hidden，就可以解决这个问题。 BFC（垂直排列）块格式化上下文，它是一个独立的渲染区域，只有块级盒子参与，它规定了内部的块级盒子如何布局1.内部的盒子会在垂直方向，一个接一个地放置；2.盒子垂直方向的距离由 margin 决定，属于同一个 BFC 的两个相邻盒子的 margin 会发生重叠；3.每个元素的 margin 的左边，与包含块 border 的左边相接触(对于从左往右的格式化，否则相反)，即使存在浮动也是如此；4.BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。5.计算 BFC 的高度时，浮动元素也参与计算。 BFC应用场景1.自适应两栏布局应用原理：BFC 的区域不会和浮动区域重叠，所以就可以把侧边栏固定宽度且左浮动，而对右侧内容触发 BFC，使得它的宽度自适应该行剩余宽度。2、清除内部浮动BFC 清除浮动的原理就是：计算 BFC 的高度时，浮动元素也参与计算。只要触发父元素的 BFC 即可。（overflow: hidden;）3、 防止垂直 margin 合并同一个 BFC 下的垂直 margin 会发生合并。所以如果让 2 个元素不在同一个 BFC 中即可阻止垂直 margin 合并。"},{"title":"Koa框架+MongoDB","date":"2021-09-19T15:23:08.914Z","url":"/2021/09/19/Koa%E6%A1%86%E6%9E%B6+MongoDB/","tags":[["koa","/tags/koa/"]],"categories":[["Koa框架","/categories/Koa%E6%A1%86%E6%9E%B6/"]],"content":"Koa框架+MongoDB教学视频参考 mongodb启动先管理员运行net start MongoDB 再到D:\\MongoDB\\bin中启动mongo.exe 搭建本地服务器先安装node 再项目初始化 ——————–package.json 安装koa 和 koa-router 成功后可在package.json看到 在package.json中更改入口文件 新建app.js 在package.json中配置启动命令 运行npm run server或npm run start启动项目 连接MongoDB数据库首先安装mongoose 在app.js中引入mongoose 再连接数据库 成功后打印Mongodb Connectd… 可进行优化： 1、创建config/key.js 2、引入 3、连接 创建测试接口创建routes/api/users.js 用户信息文件 在app.js中指定路由地址 1、引入 2、配置路由地址 最后访问localhost:5000/api/users/test 可以看到{“msg”:”users works..”} 配置用户模型创建models/Users.js 在routes/api/users.js下引入User 注册接口和调试工具Postman安装koa-bodyparser 1、在app.js中引入 2、使用 在routes/api/users.js中做post请求 可以在Postman中看到返回的json数据 可给密码加密用bcryptjs 1、在routes/api/users.js引入 2、使用 全球公认头像1、安装 2、在routes/api/users.js中使用 同步加密封装因为之前的异步加密使用了两次异步，数据库里的密码还是明文 所以改用同步 创建config/tools.js 在routes/api/users.js中 返回json数据 登录接口在routes/api/users.js中 生成token1、安装jsonwebtoken 2、在routes/api/users.js中引用 优化 在config/keys.js中添加secret 返回json数据 koa-passport验证token安装 在package.json中可看到 在app.js入口文件中使用 创建config/passport.js 安装passport-jwt 在config/passport.js中使用 在routes/api/users.js中填写获取用户信息接口 使用validator验证表单安装 创建validator/register.js 创建validator/is-empty.js 在routes/api/users.js中引入input验证 并在注册接口地址中添加 验证登录和注册的input在validator/register.js中 创建validator/login.js 在routes/api/users.js中引入input验证 并在登录接口地址中添加 "},{"title":"Hello World","date":"2021-09-19T12:17:04.661Z","url":"/2021/09/19/hello-world/","categories":[["undefined",""]],"content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post More info: Writing Run server More info: Server Generate static files More info: Generating Deploy to remote sites More info: Deployment"}]